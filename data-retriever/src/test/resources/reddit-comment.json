[
  {
    "kind": "Listing",
    "data": {
      "modhash": "",
      "dist": 1,
      "children": [
        {
          "kind": "t3",
          "data": {
            "approved_at_utc": null,
            "subreddit": "redditdev",
            "selftext": "Hey guys!  I am going to put together a series of lessons for developers.  I will progress through the process of getting JSON data from Reddit's API, building a MySQL database and importing the Reddit data into a database.  With these lessons, you will be able to create a fully functional database using Reddit's API for your projects.\n\nI've just started coding in Python (I was previously a PERL programmer).  If you see any errors in the code, please let me know.  \n\nI hope these tutorials will help aspiring developers create awesome applications for other Redditors.  \n\nToday's lesson is a simple one.  We will create a very basic Python script to retrieve Reddit submission data using the JSON format.  \n\nLet's dive in!  For these lessons, I will assume you are using a linux distribution (Ubuntu, Fedora, etc.)  If you are running windows, I would recommend that you download Virtualbox (Free Oracle product) and install Ubuntu under Virtualbox.  Virtualbox is a nice virtual machine which allows you to run a complete OS under your existing OS.  \n\nYou can learn more about Virtualbox and download it from [here](https://www.virtualbox.org/).\n\nYou can download the install files (*both 32 and 64 bit versions*) for Ubuntu [here](http://www.ubuntu.com/download/desktop).\n\n**Once you have Ubuntu installed, you can install MySQL (if it is not already installed) by using these commands:**\n\n    sudo apt-get update\n    sudo apt-get dist-upgrade\n    sudo apt-get install mysql-server mysql-client\n\n**You can install phpmyadmin for Ubuntu and MySQL using this command:**\n\n    sudo apt-get install phpmyadmin\n\nThe following code is very simplistic.  It authenticates with Reddit's server and makes requests for submission data.  Each request will return up to 100 submissions.  It is important that you change the setting in your Reddit profile to receive 100 listings per request.  The other alternative is to pass a URL variable with your GET request using the limit variable.  In this script, I have hard-coded the limit to the maximum of 100. \n\nThis is a very basic script with virtually no error control, so you may want to add additional error handling routines in your project.\n\n**Here is the code for the Python script:**\n\n    #!/usr/bin/python\n    #\n    # Script Name: getRedditJSONSubmissionData.py\n    # Usage: ./getRedditJSONSubmissionData.py &gt; redditData.json\n    # ----------------------------------------------------------------------------------------------------------------\n    # This script will average one request every two seconds.  If the servers return data faster, you might\n    # need to change the sleep time to avoid going over the API limits.  \n    # Also, make sure you change the settings in your Reddit account to get 100 objects at a time.  You can\n    # also use the URL variable \"limit=100\" (it might be count=100?)\n    #\n    # Also, the code to handle errors if a non-status 200 response is received should be improved to \n    # eventually stop requesting after X amount of failures -- this might happen if Reddit's servers go down\n    # for an extended time period.\n    # ----------------------------------------------------------------------------------------------------------------\n\n    import requests\n    import json\n    import time\n    import sys\n\n    user_pass_dict = {'user': 'your_user_name',\n                  'passwd': 'your_password',\n                  'api_type': 'json'}\n    s = requests.Session()\n    s.headers.update({'User-Agent' : 'short_description_of_yourself user:your_user_name'})\n    r = s.post(r'http://www.reddit.com/api/login', data=user_pass_dict)\n    j = json.loads(r.content)\n    after = \"\" # Set this to a T3 object to start at a specific point or leave blank to start with the most recent submissions\n\n    while True:\n        time.sleep(1) # Sleep for one second to avoid going over API limits\n        url = \"http://www.reddit.com/r/all/new/.json?limit=100&amp;after=\" + after\n        html = s.get(url) # Make request to Reddit API\n        if html.status_code != 200:  # This error handing is extremely basic.  Please improve.\n            # Error handing block\n            sys.stderr.write(str(html.status_code)) # Print HTTP error status code to STDOUT\n            sys.stderr.write(url)\n            continue\n            # End Error handling block\n        print html.content # Print the JSON object \n        after = decode['data']['after']  # Update after variable to receive the next batch of submissions in this loop\n",
            "user_reports": [],
            "saved": false,
            "mod_reason_title": null,
            "gilded": 0,
            "clicked": false,
            "title": "Lesson 1: How to get submission data from Reddit's API",
            "link_flair_richtext": [],
            "subreddit_name_prefixed": "r/redditdev",
            "hidden": false,
            "pwls": 6,
            "link_flair_css_class": null,
            "downs": 0,
            "parent_whitelist_status": "all_ads",
            "hide_score": false,
            "name": "t3_1c75dh",
            "quarantine": false,
            "link_flair_text_color": "dark",
            "upvote_ratio": 0.82,
            "author_flair_background_color": null,
            "subreddit_type": "public",
            "ups": 12,
            "total_awards_received": 0,
            "media_embed": {},
            "author_flair_template_id": null,
            "is_original_content": false,
            "author_fullname": "t2_3ek27",
            "secure_media": null,
            "is_reddit_media_domain": false,
            "is_meta": false,
            "category": null,
            "secure_media_embed": {},
            "link_flair_text": null,
            "can_mod_post": false,
            "score": 12,
            "approved_by": null,
            "thumbnail": "",
            "edited": 1365777666.0,
            "author_flair_css_class": null,
            "author_flair_richtext": [],
            "gildings": {},
            "content_categories": null,
            "is_self": true,
            "mod_note": null,
            "created": 1365790908.0,
            "link_flair_type": "text",
            "wls": 6,
            "banned_by": null,
            "author_flair_type": "text",
            "domain": "self.redditdev",
            "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys!  I am going to put together a series of lessons for developers.  I will progress through the process of getting JSON data from Reddit&amp;#39;s API, building a MySQL database and importing the Reddit data into a database.  With these lessons, you will be able to create a fully functional database using Reddit&amp;#39;s API for your projects.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve just started coding in Python (I was previously a PERL programmer).  If you see any errors in the code, please let me know.  &lt;/p&gt;\n\n&lt;p&gt;I hope these tutorials will help aspiring developers create awesome applications for other Redditors.  &lt;/p&gt;\n\n&lt;p&gt;Today&amp;#39;s lesson is a simple one.  We will create a very basic Python script to retrieve Reddit submission data using the JSON format.  &lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s dive in!  For these lessons, I will assume you are using a linux distribution (Ubuntu, Fedora, etc.)  If you are running windows, I would recommend that you download Virtualbox (Free Oracle product) and install Ubuntu under Virtualbox.  Virtualbox is a nice virtual machine which allows you to run a complete OS under your existing OS.  &lt;/p&gt;\n\n&lt;p&gt;You can learn more about Virtualbox and download it from &lt;a href=\"https://www.virtualbox.org/\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can download the install files (&lt;em&gt;both 32 and 64 bit versions&lt;/em&gt;) for Ubuntu &lt;a href=\"http://www.ubuntu.com/download/desktop\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Once you have Ubuntu installed, you can install MySQL (if it is not already installed) by using these commands:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sudo apt-get update\nsudo apt-get dist-upgrade\nsudo apt-get install mysql-server mysql-client\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;You can install phpmyadmin for Ubuntu and MySQL using this command:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sudo apt-get install phpmyadmin\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following code is very simplistic.  It authenticates with Reddit&amp;#39;s server and makes requests for submission data.  Each request will return up to 100 submissions.  It is important that you change the setting in your Reddit profile to receive 100 listings per request.  The other alternative is to pass a URL variable with your GET request using the limit variable.  In this script, I have hard-coded the limit to the maximum of 100. &lt;/p&gt;\n\n&lt;p&gt;This is a very basic script with virtually no error control, so you may want to add additional error handling routines in your project.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Here is the code for the Python script:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#!/usr/bin/python\n#\n# Script Name: getRedditJSONSubmissionData.py\n# Usage: ./getRedditJSONSubmissionData.py &amp;gt; redditData.json\n# ----------------------------------------------------------------------------------------------------------------\n# This script will average one request every two seconds.  If the servers return data faster, you might\n# need to change the sleep time to avoid going over the API limits.  \n# Also, make sure you change the settings in your Reddit account to get 100 objects at a time.  You can\n# also use the URL variable &amp;quot;limit=100&amp;quot; (it might be count=100?)\n#\n# Also, the code to handle errors if a non-status 200 response is received should be improved to \n# eventually stop requesting after X amount of failures -- this might happen if Reddit&amp;#39;s servers go down\n# for an extended time period.\n# ----------------------------------------------------------------------------------------------------------------\n\nimport requests\nimport json\nimport time\nimport sys\n\nuser_pass_dict = {&amp;#39;user&amp;#39;: &amp;#39;your_user_name&amp;#39;,\n              &amp;#39;passwd&amp;#39;: &amp;#39;your_password&amp;#39;,\n              &amp;#39;api_type&amp;#39;: &amp;#39;json&amp;#39;}\ns = requests.Session()\ns.headers.update({&amp;#39;User-Agent&amp;#39; : &amp;#39;short_description_of_yourself user:your_user_name&amp;#39;})\nr = s.post(r&amp;#39;http://www.reddit.com/api/login&amp;#39;, data=user_pass_dict)\nj = json.loads(r.content)\nafter = &amp;quot;&amp;quot; # Set this to a T3 object to start at a specific point or leave blank to start with the most recent submissions\n\nwhile True:\n    time.sleep(1) # Sleep for one second to avoid going over API limits\n    url = &amp;quot;http://www.reddit.com/r/all/new/.json?limit=100&amp;amp;after=&amp;quot; + after\n    html = s.get(url) # Make request to Reddit API\n    if html.status_code != 200:  # This error handing is extremely basic.  Please improve.\n        # Error handing block\n        sys.stderr.write(str(html.status_code)) # Print HTTP error status code to STDOUT\n        sys.stderr.write(url)\n        continue\n        # End Error handling block\n    print html.content # Print the JSON object \n    after = decode[&amp;#39;data&amp;#39;][&amp;#39;after&amp;#39;]  # Update after variable to receive the next batch of submissions in this loop\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
            "likes": null,
            "suggested_sort": null,
            "banned_at_utc": null,
            "view_count": null,
            "archived": true,
            "no_follow": false,
            "is_crosspostable": false,
            "pinned": false,
            "over_18": false,
            "all_awardings": [],
            "media": null,
            "media_only": false,
            "can_gild": false,
            "spoiler": false,
            "locked": false,
            "author_flair_text": null,
            "visited": false,
            "num_reports": null,
            "distinguished": null,
            "subreddit_id": "t5_2qizd",
            "mod_reason_by": null,
            "removal_reason": null,
            "link_flair_background_color": "",
            "id": "1c75dh",
            "is_robot_indexable": true,
            "report_reasons": null,
            "author": "aphexcoil",
            "num_crossposts": 0,
            "num_comments": 12,
            "send_replies": true,
            "contest_mode": false,
            "author_patreon_flair": false,
            "author_flair_text_color": null,
            "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/",
            "whitelist_status": "all_ads",
            "stickied": false,
            "url": "https://www.reddit.com/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/",
            "subreddit_subscribers": 22122,
            "created_utc": 1365762108.0,
            "mod_reports": [],
            "is_video": false
          }
        }
      ],
      "after": null,
      "before": null
    }
  },
  {
    "kind": "Listing",
    "data": {
      "modhash": "",
      "dist": null,
      "children": [
        {
          "kind": "t1",
          "data": {
            "total_awards_received": 0,
            "approved_at_utc": null,
            "ups": 4,
            "mod_reason_by": null,
            "banned_by": null,
            "author_flair_type": "text",
            "removal_reason": null,
            "link_id": "t3_1c75dh",
            "author_flair_template_id": null,
            "likes": null,
            "no_follow": false,
            "replies": {
              "kind": "Listing",
              "data": {
                "modhash": "",
                "dist": null,
                "children": [
                  {
                    "kind": "t1",
                    "data": {
                      "total_awards_received": 0,
                      "approved_at_utc": null,
                      "ups": 1,
                      "mod_reason_by": null,
                      "banned_by": null,
                      "author_flair_type": "text",
                      "removal_reason": null,
                      "link_id": "t3_1c75dh",
                      "author_flair_template_id": null,
                      "likes": null,
                      "no_follow": true,
                      "replies": "",
                      "user_reports": [],
                      "saved": false,
                      "id": "c9ehbkl",
                      "banned_at_utc": null,
                      "mod_reason_title": null,
                      "gilded": 0,
                      "archived": true,
                      "report_reasons": null,
                      "author": "aphexcoil",
                      "can_mod_post": false,
                      "send_replies": true,
                      "parent_id": "t1_c9dxcp2",
                      "score": 1,
                      "author_fullname": "t2_3ek27",
                      "approved_by": null,
                      "all_awardings": [],
                      "subreddit_id": "t5_2qizd",
                      "body": "Thank you!  I'll have to play around with praw and see what it can do, but it does sound very fascinating!",
                      "edited": false,
                      "author_flair_css_class": null,
                      "is_submitter": true,
                      "downs": 0,
                      "author_flair_richtext": [],
                      "author_patreon_flair": false,
                      "collapsed_reason": null,
                      "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thank you!  I&amp;#39;ll have to play around with praw and see what it can do, but it does sound very fascinating!&lt;/p&gt;\n&lt;/div&gt;",
                      "stickied": false,
                      "subreddit_type": "public",
                      "can_gild": true,
                      "gildings": {},
                      "author_flair_text_color": null,
                      "score_hidden": false,
                      "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9ehbkl/",
                      "num_reports": null,
                      "locked": false,
                      "name": "t1_c9ehbkl",
                      "created": 1365903727.0,
                      "subreddit": "redditdev",
                      "author_flair_text": null,
                      "collapsed": false,
                      "created_utc": 1365874927.0,
                      "subreddit_name_prefixed": "r/redditdev",
                      "controversiality": 0,
                      "depth": 1,
                      "author_flair_background_color": null,
                      "mod_reports": [],
                      "mod_note": null,
                      "distinguished": null
                    }
                  }
                ],
                "after": null,
                "before": null
              }
            },
            "user_reports": [],
            "saved": false,
            "id": "c9dxcp2",
            "banned_at_utc": null,
            "mod_reason_title": null,
            "gilded": 0,
            "archived": true,
            "report_reasons": null,
            "author": "bboe",
            "can_mod_post": false,
            "send_replies": true,
            "parent_id": "t3_1c75dh",
            "score": 4,
            "author_fullname": "t2_3pz6e",
            "approved_by": null,
            "all_awardings": [],
            "subreddit_id": "t5_2qizd",
            "body": "For comparison here's the similar functionality using PRAW:\n\n    import praw\n    r = praw.Reddit('a descriptive user agent')\n    r.login()\n    for submission in r.get_subreddit('all').get_new(limit=None):\n        print(vars(submission))\n\nAlso, you really should use reddit's HTTPS endpoint for authentication purposes.",
            "edited": false,
            "author_flair_css_class": "",
            "is_submitter": false,
            "downs": 0,
            "author_flair_richtext": [],
            "author_patreon_flair": false,
            "collapsed_reason": null,
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For comparison here&amp;#39;s the similar functionality using PRAW:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import praw\nr = praw.Reddit(&amp;#39;a descriptive user agent&amp;#39;)\nr.login()\nfor submission in r.get_subreddit(&amp;#39;all&amp;#39;).get_new(limit=None):\n    print(vars(submission))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also, you really should use reddit&amp;#39;s HTTPS endpoint for authentication purposes.&lt;/p&gt;\n&lt;/div&gt;",
            "stickied": false,
            "subreddit_type": "public",
            "can_gild": true,
            "gildings": {},
            "author_flair_text_color": "dark",
            "score_hidden": false,
            "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dxcp2/",
            "num_reports": null,
            "locked": false,
            "name": "t1_c9dxcp2",
            "created": 1365821401.0,
            "subreddit": "redditdev",
            "author_flair_text": "PRAW Author",
            "collapsed": false,
            "created_utc": 1365792601.0,
            "subreddit_name_prefixed": "r/redditdev",
            "controversiality": 0,
            "depth": 0,
            "author_flair_background_color": "",
            "mod_reports": [],
            "mod_note": null,
            "distinguished": null
          }
        },
        {
          "kind": "t1",
          "data": {
            "total_awards_received": 0,
            "approved_at_utc": null,
            "ups": 3,
            "mod_reason_by": null,
            "banned_by": null,
            "author_flair_type": "text",
            "removal_reason": null,
            "link_id": "t3_1c75dh",
            "author_flair_template_id": null,
            "likes": null,
            "no_follow": true,
            "replies": {
              "kind": "Listing",
              "data": {
                "modhash": "",
                "dist": null,
                "children": [
                  {
                    "kind": "t1",
                    "data": {
                      "total_awards_received": 0,
                      "approved_at_utc": null,
                      "ups": 3,
                      "mod_reason_by": null,
                      "banned_by": null,
                      "author_flair_type": "text",
                      "removal_reason": null,
                      "link_id": "t3_1c75dh",
                      "author_flair_template_id": null,
                      "likes": null,
                      "no_follow": true,
                      "replies": {
                        "kind": "Listing",
                        "data": {
                          "modhash": "",
                          "dist": null,
                          "children": [
                            {
                              "kind": "t1",
                              "data": {
                                "total_awards_received": 0,
                                "approved_at_utc": null,
                                "ups": 2,
                                "mod_reason_by": null,
                                "banned_by": null,
                                "author_flair_type": "text",
                                "removal_reason": null,
                                "link_id": "t3_1c75dh",
                                "author_flair_template_id": null,
                                "likes": null,
                                "no_follow": true,
                                "replies": {
                                  "kind": "Listing",
                                  "data": {
                                    "modhash": "",
                                    "dist": null,
                                    "children": [
                                      {
                                        "kind": "t1",
                                        "data": {
                                          "total_awards_received": 0,
                                          "approved_at_utc": null,
                                          "ups": 2,
                                          "mod_reason_by": null,
                                          "banned_by": null,
                                          "author_flair_type": "text",
                                          "removal_reason": null,
                                          "link_id": "t3_1c75dh",
                                          "author_flair_template_id": null,
                                          "likes": null,
                                          "no_follow": true,
                                          "replies": {
                                            "kind": "Listing",
                                            "data": {
                                              "modhash": "",
                                              "dist": null,
                                              "children": [
                                                {
                                                  "kind": "t1",
                                                  "data": {
                                                    "total_awards_received": 0,
                                                    "approved_at_utc": null,
                                                    "ups": 2,
                                                    "mod_reason_by": null,
                                                    "banned_by": null,
                                                    "author_flair_type": "text",
                                                    "removal_reason": null,
                                                    "link_id": "t3_1c75dh",
                                                    "author_flair_template_id": null,
                                                    "likes": null,
                                                    "no_follow": true,
                                                    "replies": {
                                                      "kind": "Listing",
                                                      "data": {
                                                        "modhash": "",
                                                        "dist": null,
                                                        "children": [
                                                          {
                                                            "kind": "t1",
                                                            "data": {
                                                              "total_awards_received": 0,
                                                              "approved_at_utc": null,
                                                              "ups": 1,
                                                              "mod_reason_by": null,
                                                              "banned_by": null,
                                                              "author_flair_type": "text",
                                                              "removal_reason": null,
                                                              "link_id": "t3_1c75dh",
                                                              "author_flair_template_id": null,
                                                              "likes": null,
                                                              "no_follow": true,
                                                              "replies": {
                                                                "kind": "Listing",
                                                                "data": {
                                                                  "modhash": "",
                                                                  "dist": null,
                                                                  "children": [
                                                                    {
                                                                      "kind": "t1",
                                                                      "data": {
                                                                        "total_awards_received": 0,
                                                                        "approved_at_utc": null,
                                                                        "ups": 2,
                                                                        "mod_reason_by": null,
                                                                        "banned_by": null,
                                                                        "author_flair_type": "text",
                                                                        "removal_reason": null,
                                                                        "link_id": "t3_1c75dh",
                                                                        "author_flair_template_id": null,
                                                                        "likes": null,
                                                                        "no_follow": true,
                                                                        "replies": {
                                                                          "kind": "Listing",
                                                                          "data": {
                                                                            "modhash": "",
                                                                            "dist": null,
                                                                            "children": [
                                                                              {
                                                                                "kind": "t1",
                                                                                "data": {
                                                                                  "total_awards_received": 0,
                                                                                  "approved_at_utc": null,
                                                                                  "ups": 2,
                                                                                  "mod_reason_by": null,
                                                                                  "banned_by": null,
                                                                                  "author_flair_type": "text",
                                                                                  "removal_reason": null,
                                                                                  "link_id": "t3_1c75dh",
                                                                                  "author_flair_template_id": null,
                                                                                  "likes": null,
                                                                                  "no_follow": true,
                                                                                  "replies": {
                                                                                    "kind": "Listing",
                                                                                    "data": {
                                                                                      "modhash": "",
                                                                                      "dist": null,
                                                                                      "children": [
                                                                                        {
                                                                                          "kind": "t1",
                                                                                          "data": {
                                                                                            "total_awards_received": 0,
                                                                                            "approved_at_utc": null,
                                                                                            "ups": 1,
                                                                                            "mod_reason_by": null,
                                                                                            "banned_by": null,
                                                                                            "author_flair_type": "text",
                                                                                            "removal_reason": null,
                                                                                            "link_id": "t3_1c75dh",
                                                                                            "author_flair_template_id": null,
                                                                                            "likes": null,
                                                                                            "no_follow": true,
                                                                                            "replies": "",
                                                                                            "user_reports": [],
                                                                                            "saved": false,
                                                                                            "id": "c9e1ar3",
                                                                                            "banned_at_utc": null,
                                                                                            "mod_reason_title": null,
                                                                                            "gilded": 0,
                                                                                            "archived": true,
                                                                                            "report_reasons": null,
                                                                                            "author": "wub_wub",
                                                                                            "can_mod_post": false,
                                                                                            "send_replies": true,
                                                                                            "parent_id": "t1_c9dx7bb",
                                                                                            "score": 1,
                                                                                            "author_fullname": "t2_5352p",
                                                                                            "approved_by": null,
                                                                                            "all_awardings": [],
                                                                                            "subreddit_id": "t5_2qizd",
                                                                                            "body": "I wrote another version because I'm bored waiting for code jam that **should** work on python 2 and 3 on both windows and linux distros. Also it's follows [PEP8](http://www.python.org/dev/peps/pep-0008/) with only few exceptions I think. It's not the best code ever, but meh. Maybe someone will find it useful. \n\nI wrote it pretty quickly and I didn't test it on windows...\n\nIt will catch other errors it also has optional login, optional subreddit name and optional adding data to file or writing to new file,\n\nUsage\n\n    nikola@li:~$ python rtest.py -h\n    usage: rtest.py [-h] [-u USERNAME] [-p PASSWORD] [-r SUBREDDIT] [-m MODE]\n                      filename\n\n    Python Reddit Script\n\n    positional arguments:\n      filename      Filename to save data to.\n\n    optional arguments:\n      -h, --help    show this help message and exit\n      -u USERNAME   Yur reddit username\n      -p PASSWORD   Your reddit password\n      -r SUBREDDIT  Subreddit to fetch data from\n      -m MODE       File mode, \"a\" will append to previous file \"r\" \" will\n                    overwrite old data if there is any\n\n\nThe only thing that should be written better is file handling. It currently stays open infinitely... Maybe using `with` to open it or something would be better...\n\nEdit:\n\nForgot link\n\nhttps://gist.github.com/Nikola-K/5375314",
                                                                                            "edited": 1365868022.0,
                                                                                            "author_flair_css_class": null,
                                                                                            "is_submitter": false,
                                                                                            "downs": 0,
                                                                                            "author_flair_richtext": [],
                                                                                            "author_patreon_flair": false,
                                                                                            "collapsed_reason": null,
                                                                                            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I wrote another version because I&amp;#39;m bored waiting for code jam that &lt;strong&gt;should&lt;/strong&gt; work on python 2 and 3 on both windows and linux distros. Also it&amp;#39;s follows &lt;a href=\"http://www.python.org/dev/peps/pep-0008/\"&gt;PEP8&lt;/a&gt; with only few exceptions I think. It&amp;#39;s not the best code ever, but meh. Maybe someone will find it useful. &lt;/p&gt;\n\n&lt;p&gt;I wrote it pretty quickly and I didn&amp;#39;t test it on windows...&lt;/p&gt;\n\n&lt;p&gt;It will catch other errors it also has optional login, optional subreddit name and optional adding data to file or writing to new file,&lt;/p&gt;\n\n&lt;p&gt;Usage&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;nikola@li:~$ python rtest.py -h\nusage: rtest.py [-h] [-u USERNAME] [-p PASSWORD] [-r SUBREDDIT] [-m MODE]\n                  filename\n\nPython Reddit Script\n\npositional arguments:\n  filename      Filename to save data to.\n\noptional arguments:\n  -h, --help    show this help message and exit\n  -u USERNAME   Yur reddit username\n  -p PASSWORD   Your reddit password\n  -r SUBREDDIT  Subreddit to fetch data from\n  -m MODE       File mode, &amp;quot;a&amp;quot; will append to previous file &amp;quot;r&amp;quot; &amp;quot; will\n                overwrite old data if there is any\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The only thing that should be written better is file handling. It currently stays open infinitely... Maybe using &lt;code&gt;with&lt;/code&gt; to open it or something would be better...&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;Forgot link&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/Nikola-K/5375314\"&gt;https://gist.github.com/Nikola-K/5375314&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;",
                                                                                            "stickied": false,
                                                                                            "subreddit_type": "public",
                                                                                            "can_gild": true,
                                                                                            "gildings": {},
                                                                                            "author_flair_text_color": null,
                                                                                            "score_hidden": false,
                                                                                            "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9e1ar3/",
                                                                                            "num_reports": null,
                                                                                            "locked": false,
                                                                                            "name": "t1_c9e1ar3",
                                                                                            "created": 1365831924.0,
                                                                                            "subreddit": "redditdev",
                                                                                            "author_flair_text": null,
                                                                                            "collapsed": false,
                                                                                            "created_utc": 1365803124.0,
                                                                                            "subreddit_name_prefixed": "r/redditdev",
                                                                                            "controversiality": 0,
                                                                                            "depth": 8,
                                                                                            "author_flair_background_color": null,
                                                                                            "mod_reports": [],
                                                                                            "mod_note": null,
                                                                                            "distinguished": null
                                                                                          }
                                                                                        }
                                                                                      ],
                                                                                      "after": null,
                                                                                      "before": null
                                                                                    }
                                                                                  },
                                                                                  "user_reports": [],
                                                                                  "saved": false,
                                                                                  "id": "c9dx7bb",
                                                                                  "banned_at_utc": null,
                                                                                  "mod_reason_title": null,
                                                                                  "gilded": 0,
                                                                                  "archived": true,
                                                                                  "report_reasons": null,
                                                                                  "author": "aphexcoil",
                                                                                  "can_mod_post": false,
                                                                                  "send_replies": true,
                                                                                  "parent_id": "t1_c9dwgte",
                                                                                  "score": 2,
                                                                                  "author_fullname": "t2_3ek27",
                                                                                  "approved_by": null,
                                                                                  "all_awardings": [],
                                                                                  "subreddit_id": "t5_2qizd",
                                                                                  "body": "That's awesome!  I will update the source code shortly.\n\nThanks man!",
                                                                                  "edited": false,
                                                                                  "author_flair_css_class": null,
                                                                                  "is_submitter": true,
                                                                                  "downs": 0,
                                                                                  "author_flair_richtext": [],
                                                                                  "author_patreon_flair": false,
                                                                                  "collapsed_reason": null,
                                                                                  "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s awesome!  I will update the source code shortly.&lt;/p&gt;\n\n&lt;p&gt;Thanks man!&lt;/p&gt;\n&lt;/div&gt;",
                                                                                  "stickied": false,
                                                                                  "subreddit_type": "public",
                                                                                  "can_gild": true,
                                                                                  "gildings": {},
                                                                                  "author_flair_text_color": null,
                                                                                  "score_hidden": false,
                                                                                  "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dx7bb/",
                                                                                  "num_reports": null,
                                                                                  "locked": false,
                                                                                  "name": "t1_c9dx7bb",
                                                                                  "created": 1365821016.0,
                                                                                  "subreddit": "redditdev",
                                                                                  "author_flair_text": null,
                                                                                  "collapsed": false,
                                                                                  "created_utc": 1365792216.0,
                                                                                  "subreddit_name_prefixed": "r/redditdev",
                                                                                  "controversiality": 0,
                                                                                  "depth": 7,
                                                                                  "author_flair_background_color": null,
                                                                                  "mod_reports": [],
                                                                                  "mod_note": null,
                                                                                  "distinguished": null
                                                                                }
                                                                              }
                                                                            ],
                                                                            "after": null,
                                                                            "before": null
                                                                          }
                                                                        },
                                                                        "user_reports": [],
                                                                        "saved": false,
                                                                        "id": "c9dwgte",
                                                                        "banned_at_utc": null,
                                                                        "mod_reason_title": null,
                                                                        "gilded": 0,
                                                                        "archived": true,
                                                                        "report_reasons": null,
                                                                        "author": "wub_wub",
                                                                        "can_mod_post": false,
                                                                        "send_replies": true,
                                                                        "parent_id": "t1_c9dw312",
                                                                        "score": 2,
                                                                        "author_fullname": "t2_5352p",
                                                                        "approved_by": null,
                                                                        "all_awardings": [],
                                                                        "subreddit_id": "t5_2qizd",
                                                                        "body": "    import requests\n    import json\n    import time\n    import sys\n    \n    user_pass_dict = {'user': 'your_user_name',\n                      'passwd': 'your_password',\n                      'api_type': 'json'}\n    s = requests.Session()\n    s.headers.update({'User-Agent': 'short_description_of_yourself user:your_user_name'})\n    r = s.post(r'http://www.reddit.com/api/login', data=user_pass_dict)\n    j = json.loads(r.content)\n    after = \"\"  # Set this to a T3 object to start at a specific point or leave blank to start with the most recent submissions\n    maximum_retries = 5  # Maximum number of times script will try to open link\n                         # if previous request failed before trying from start\n    current_retries = 0  # Count of how many times previous request failed.\n    while True:\n        time.sleep(1)  # Sleep for one second to avoid going over API limits\n        url = \"http://www.reddit.com/r/all/new/.json?limit=100&amp;after=\" + after\n        html = s.get(url)  # Make request to Reddit API\n        if html.status_code != 200:  # This error handing is extremely basic.  Please improve.\n            # Error handing block\n            sys.stderr.write(str(html.status_code))  # Print HTTP error status code to STDOUT\n            sys.stderr.write(url)\n            current_retries += 1\n            print \"Retrying {} | {}/{}\".format(url, current_retries, maximum_retries)\n            if current_retries &gt;= maximum_retries:\n                after = \"\"\n                current_retries = 0\n            continue\n            # End Error handling block\n        print html.content  # Print the JSON object\n        after = decode['data']['after']  # Update after variable to receive the next batch of submissions in this loop\n    \n        if current_retries &gt; 0:\n            current_retries = 0\n    ",
                                                                        "edited": 1365796341.0,
                                                                        "author_flair_css_class": null,
                                                                        "is_submitter": false,
                                                                        "downs": 0,
                                                                        "author_flair_richtext": [],
                                                                        "author_patreon_flair": false,
                                                                        "collapsed_reason": null,
                                                                        "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;import requests\nimport json\nimport time\nimport sys\n\nuser_pass_dict = {&amp;#39;user&amp;#39;: &amp;#39;your_user_name&amp;#39;,\n                  &amp;#39;passwd&amp;#39;: &amp;#39;your_password&amp;#39;,\n                  &amp;#39;api_type&amp;#39;: &amp;#39;json&amp;#39;}\ns = requests.Session()\ns.headers.update({&amp;#39;User-Agent&amp;#39;: &amp;#39;short_description_of_yourself user:your_user_name&amp;#39;})\nr = s.post(r&amp;#39;http://www.reddit.com/api/login&amp;#39;, data=user_pass_dict)\nj = json.loads(r.content)\nafter = &amp;quot;&amp;quot;  # Set this to a T3 object to start at a specific point or leave blank to start with the most recent submissions\nmaximum_retries = 5  # Maximum number of times script will try to open link\n                     # if previous request failed before trying from start\ncurrent_retries = 0  # Count of how many times previous request failed.\nwhile True:\n    time.sleep(1)  # Sleep for one second to avoid going over API limits\n    url = &amp;quot;http://www.reddit.com/r/all/new/.json?limit=100&amp;amp;after=&amp;quot; + after\n    html = s.get(url)  # Make request to Reddit API\n    if html.status_code != 200:  # This error handing is extremely basic.  Please improve.\n        # Error handing block\n        sys.stderr.write(str(html.status_code))  # Print HTTP error status code to STDOUT\n        sys.stderr.write(url)\n        current_retries += 1\n        print &amp;quot;Retrying {} | {}/{}&amp;quot;.format(url, current_retries, maximum_retries)\n        if current_retries &amp;gt;= maximum_retries:\n            after = &amp;quot;&amp;quot;\n            current_retries = 0\n        continue\n        # End Error handling block\n    print html.content  # Print the JSON object\n    after = decode[&amp;#39;data&amp;#39;][&amp;#39;after&amp;#39;]  # Update after variable to receive the next batch of submissions in this loop\n\n    if current_retries &amp;gt; 0:\n        current_retries = 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
                                                                        "stickied": false,
                                                                        "subreddit_type": "public",
                                                                        "can_gild": true,
                                                                        "gildings": {},
                                                                        "author_flair_text_color": null,
                                                                        "score_hidden": false,
                                                                        "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dwgte/",
                                                                        "num_reports": null,
                                                                        "locked": false,
                                                                        "name": "t1_c9dwgte",
                                                                        "created": 1365819114.0,
                                                                        "subreddit": "redditdev",
                                                                        "author_flair_text": null,
                                                                        "collapsed": false,
                                                                        "created_utc": 1365790314.0,
                                                                        "subreddit_name_prefixed": "r/redditdev",
                                                                        "controversiality": 0,
                                                                        "depth": 6,
                                                                        "author_flair_background_color": null,
                                                                        "mod_reports": [],
                                                                        "mod_note": null,
                                                                        "distinguished": null
                                                                      }
                                                                    }
                                                                  ],
                                                                  "after": null,
                                                                  "before": null
                                                                }
                                                              },
                                                              "user_reports": [],
                                                              "saved": false,
                                                              "id": "c9dw312",
                                                              "banned_at_utc": null,
                                                              "mod_reason_title": null,
                                                              "gilded": 0,
                                                              "archived": true,
                                                              "report_reasons": null,
                                                              "author": "aphexcoil",
                                                              "can_mod_post": false,
                                                              "send_replies": true,
                                                              "parent_id": "t1_c9dvxn2",
                                                              "score": 1,
                                                              "author_fullname": "t2_3ek27",
                                                              "approved_by": null,
                                                              "all_awardings": [],
                                                              "subreddit_id": "t5_2qizd",
                                                              "body": "Well, that part of the code will not even execute unless the status is 200.",
                                                              "edited": false,
                                                              "author_flair_css_class": null,
                                                              "is_submitter": true,
                                                              "downs": 0,
                                                              "author_flair_richtext": [],
                                                              "author_patreon_flair": false,
                                                              "collapsed_reason": null,
                                                              "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well, that part of the code will not even execute unless the status is 200.&lt;/p&gt;\n&lt;/div&gt;",
                                                              "stickied": false,
                                                              "subreddit_type": "public",
                                                              "can_gild": true,
                                                              "gildings": {},
                                                              "author_flair_text_color": null,
                                                              "score_hidden": false,
                                                              "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dw312/",
                                                              "num_reports": null,
                                                              "locked": false,
                                                              "name": "t1_c9dw312",
                                                              "created": 1365818117.0,
                                                              "subreddit": "redditdev",
                                                              "author_flair_text": null,
                                                              "collapsed": false,
                                                              "created_utc": 1365789317.0,
                                                              "subreddit_name_prefixed": "r/redditdev",
                                                              "controversiality": 0,
                                                              "depth": 5,
                                                              "author_flair_background_color": null,
                                                              "mod_reports": [],
                                                              "mod_note": null,
                                                              "distinguished": null
                                                            }
                                                          }
                                                        ],
                                                        "after": null,
                                                        "before": null
                                                      }
                                                    },
                                                    "user_reports": [],
                                                    "saved": false,
                                                    "id": "c9dvxn2",
                                                    "banned_at_utc": null,
                                                    "mod_reason_title": null,
                                                    "gilded": 0,
                                                    "archived": true,
                                                    "report_reasons": null,
                                                    "author": "wub_wub",
                                                    "can_mod_post": false,
                                                    "send_replies": true,
                                                    "parent_id": "t1_c9dvlrj",
                                                    "score": 2,
                                                    "author_fullname": "t2_5352p",
                                                    "approved_by": null,
                                                    "all_awardings": [],
                                                    "subreddit_id": "t5_2qizd",
                                                    "body": "Since `after = decode['data']['after']`  should throw an exception if you get 404 or some other error you could just catch that and reset the variable.\n\n    try:\n        after = decode['data']['after']  # Update after variable to receive the next batch of submissions in this loop\n    except:\n        after=\"\"\n",
                                                    "edited": false,
                                                    "author_flair_css_class": null,
                                                    "is_submitter": false,
                                                    "downs": 0,
                                                    "author_flair_richtext": [],
                                                    "author_patreon_flair": false,
                                                    "collapsed_reason": null,
                                                    "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Since &lt;code&gt;after = decode[&amp;#39;data&amp;#39;][&amp;#39;after&amp;#39;]&lt;/code&gt;  should throw an exception if you get 404 or some other error you could just catch that and reset the variable.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;try:\n    after = decode[&amp;#39;data&amp;#39;][&amp;#39;after&amp;#39;]  # Update after variable to receive the next batch of submissions in this loop\nexcept:\n    after=&amp;quot;&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;",
                                                    "stickied": false,
                                                    "subreddit_type": "public",
                                                    "can_gild": true,
                                                    "gildings": {},
                                                    "author_flair_text_color": null,
                                                    "score_hidden": false,
                                                    "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dvxn2/",
                                                    "num_reports": null,
                                                    "locked": false,
                                                    "name": "t1_c9dvxn2",
                                                    "created": 1365817721.0,
                                                    "subreddit": "redditdev",
                                                    "author_flair_text": null,
                                                    "collapsed": false,
                                                    "created_utc": 1365788921.0,
                                                    "subreddit_name_prefixed": "r/redditdev",
                                                    "controversiality": 0,
                                                    "depth": 4,
                                                    "author_flair_background_color": null,
                                                    "mod_reports": [],
                                                    "mod_note": null,
                                                    "distinguished": null
                                                  }
                                                }
                                              ],
                                              "after": null,
                                              "before": null
                                            }
                                          },
                                          "user_reports": [],
                                          "saved": false,
                                          "id": "c9dvlrj",
                                          "banned_at_utc": null,
                                          "mod_reason_title": null,
                                          "gilded": 0,
                                          "archived": true,
                                          "report_reasons": null,
                                          "author": "aphexcoil",
                                          "can_mod_post": false,
                                          "send_replies": true,
                                          "parent_id": "t1_c9dvbqu",
                                          "score": 2,
                                          "author_fullname": "t2_3ek27",
                                          "approved_by": null,
                                          "all_awardings": [],
                                          "subreddit_id": "t5_2qizd",
                                          "body": "My point is that Python 2.7 is already included in most of the current Linux distributions.  Requiring Python v.3+ to be installed just complicates the procedure for most users who have a standard Linux distribution.\n\nConcerning the \"after\" variable -- yes, we need to include additional error handling.  I am aware of that.  Perhaps you could help by typing out a few lines of code to solve this issue and make the script better.\n\nYou are right about requests.  I completely forgot that it is *not* included in the standard Python installation.  We definitely should modify the code so that it is not needed.  That's a very valid point.\n\nAgain, authentication is very important -- otherwise the JSON returned will not have any of the users preferences and settings included in the return.",
                                          "edited": false,
                                          "author_flair_css_class": null,
                                          "is_submitter": true,
                                          "downs": 0,
                                          "author_flair_richtext": [],
                                          "author_patreon_flair": false,
                                          "collapsed_reason": null,
                                          "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;My point is that Python 2.7 is already included in most of the current Linux distributions.  Requiring Python v.3+ to be installed just complicates the procedure for most users who have a standard Linux distribution.&lt;/p&gt;\n\n&lt;p&gt;Concerning the &amp;quot;after&amp;quot; variable -- yes, we need to include additional error handling.  I am aware of that.  Perhaps you could help by typing out a few lines of code to solve this issue and make the script better.&lt;/p&gt;\n\n&lt;p&gt;You are right about requests.  I completely forgot that it is &lt;em&gt;not&lt;/em&gt; included in the standard Python installation.  We definitely should modify the code so that it is not needed.  That&amp;#39;s a very valid point.&lt;/p&gt;\n\n&lt;p&gt;Again, authentication is very important -- otherwise the JSON returned will not have any of the users preferences and settings included in the return.&lt;/p&gt;\n&lt;/div&gt;",
                                          "stickied": false,
                                          "subreddit_type": "public",
                                          "can_gild": true,
                                          "gildings": {},
                                          "author_flair_text_color": null,
                                          "score_hidden": false,
                                          "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dvlrj/",
                                          "num_reports": null,
                                          "locked": false,
                                          "name": "t1_c9dvlrj",
                                          "created": 1365816855.0,
                                          "subreddit": "redditdev",
                                          "author_flair_text": null,
                                          "collapsed": false,
                                          "created_utc": 1365788055.0,
                                          "subreddit_name_prefixed": "r/redditdev",
                                          "controversiality": 0,
                                          "depth": 3,
                                          "author_flair_background_color": null,
                                          "mod_reports": [],
                                          "mod_note": null,
                                          "distinguished": null
                                        }
                                      }
                                    ],
                                    "after": null,
                                    "before": null
                                  }
                                },
                                "user_reports": [],
                                "saved": false,
                                "id": "c9dvbqu",
                                "banned_at_utc": null,
                                "mod_reason_title": null,
                                "gilded": 0,
                                "archived": true,
                                "report_reasons": null,
                                "author": "wub_wub",
                                "can_mod_post": false,
                                "send_replies": true,
                                "parent_id": "t1_c9dumxu",
                                "score": 2,
                                "author_fullname": "t2_5352p",
                                "approved_by": null,
                                "all_awardings": [],
                                "subreddit_id": "t5_2qizd",
                                "body": "&gt;I wanted to go with something that most people probably already have available to them.\n\n-\n\n&gt;As far as SQLite3, yes, I could use that. But then someone else would ask why I don't use (insert their favorite DB here).\n\nI did not recommend SQLite3 because it's my favourite DB, I recommended it because **everyone** with normal python installation already has it installed and doesn't need to configure anything. Also it's easier for users who are on windows to follow your tutorial instead of spending time installing databases.\n\n&gt;Yes, logging into Reddit for this particular task is not required, but future tutorials will require authentication, so I wanted to include that now.\n\nI just think that logging and handling such requests should have it's own tutorial,  named \"sending custom requests to reddit\" or something, and not to be included in \"how to get submission data from reddit\" where logging in isn't necessary.\n\n&gt;Concerning the \"after\" variable usage -- if a request is successful, the Reddit API will always return a new value for the \"after\" variable.\n\nAnd if it isn't `after` will stay the same as in the failed request and code will try to open it again, and again etc... That's what I was trying to say.\n\n\n&gt;I'm not sure how using requests is overkill\n\nIt's overkill because whoever follows this lesson has to install 3rd party module instead of writing 3 lines of code using nothing but standard library.\n\n&gt;While Python 3 is great, most systems right now are still using Python v2.7 until the Ubuntu community feels that Python 3 is stable enough and well-tested to include it as a default in their distributions.\n\nPython 3 IS stable enough and well tested. And if you don't find installing mysql-server mysql-client and requests too much I don't see how it would be an issue to put apt-get install python3 (or however it's called) (but it's probably already installed)\n\nThe reason Python 3 isn't default is because porting all applications isn't done, not because it's not tested or stable. That's because Python 3 is intentionally backwards incompatible.\n\nAnd Arch has 3.x by default IIRC also 12.10+ has it installed. and I think ubuntu Live CD images ONLY have 3.x. \n\nThe plan is to completely remove 2.7 from default installation by Ubuntu 14.04\n\nI absolutely don't see any reason to use 2.7",
                                "edited": false,
                                "author_flair_css_class": null,
                                "is_submitter": false,
                                "downs": 0,
                                "author_flair_richtext": [],
                                "author_patreon_flair": false,
                                "collapsed_reason": null,
                                "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I wanted to go with something that most people probably already have available to them.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h2&gt;&lt;/h2&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;As far as SQLite3, yes, I could use that. But then someone else would ask why I don&amp;#39;t use (insert their favorite DB here).&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I did not recommend SQLite3 because it&amp;#39;s my favourite DB, I recommended it because &lt;strong&gt;everyone&lt;/strong&gt; with normal python installation already has it installed and doesn&amp;#39;t need to configure anything. Also it&amp;#39;s easier for users who are on windows to follow your tutorial instead of spending time installing databases.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Yes, logging into Reddit for this particular task is not required, but future tutorials will require authentication, so I wanted to include that now.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I just think that logging and handling such requests should have it&amp;#39;s own tutorial,  named &amp;quot;sending custom requests to reddit&amp;quot; or something, and not to be included in &amp;quot;how to get submission data from reddit&amp;quot; where logging in isn&amp;#39;t necessary.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Concerning the &amp;quot;after&amp;quot; variable usage -- if a request is successful, the Reddit API will always return a new value for the &amp;quot;after&amp;quot; variable.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And if it isn&amp;#39;t &lt;code&gt;after&lt;/code&gt; will stay the same as in the failed request and code will try to open it again, and again etc... That&amp;#39;s what I was trying to say.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I&amp;#39;m not sure how using requests is overkill&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It&amp;#39;s overkill because whoever follows this lesson has to install 3rd party module instead of writing 3 lines of code using nothing but standard library.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;While Python 3 is great, most systems right now are still using Python v2.7 until the Ubuntu community feels that Python 3 is stable enough and well-tested to include it as a default in their distributions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Python 3 IS stable enough and well tested. And if you don&amp;#39;t find installing mysql-server mysql-client and requests too much I don&amp;#39;t see how it would be an issue to put apt-get install python3 (or however it&amp;#39;s called) (but it&amp;#39;s probably already installed)&lt;/p&gt;\n\n&lt;p&gt;The reason Python 3 isn&amp;#39;t default is because porting all applications isn&amp;#39;t done, not because it&amp;#39;s not tested or stable. That&amp;#39;s because Python 3 is intentionally backwards incompatible.&lt;/p&gt;\n\n&lt;p&gt;And Arch has 3.x by default IIRC also 12.10+ has it installed. and I think ubuntu Live CD images ONLY have 3.x. &lt;/p&gt;\n\n&lt;p&gt;The plan is to completely remove 2.7 from default installation by Ubuntu 14.04&lt;/p&gt;\n\n&lt;p&gt;I absolutely don&amp;#39;t see any reason to use 2.7&lt;/p&gt;\n&lt;/div&gt;",
                                "stickied": false,
                                "subreddit_type": "public",
                                "can_gild": true,
                                "gildings": {},
                                "author_flair_text_color": null,
                                "score_hidden": false,
                                "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dvbqu/",
                                "num_reports": null,
                                "locked": false,
                                "name": "t1_c9dvbqu",
                                "created": 1365816118.0,
                                "subreddit": "redditdev",
                                "author_flair_text": null,
                                "collapsed": false,
                                "created_utc": 1365787318.0,
                                "subreddit_name_prefixed": "r/redditdev",
                                "controversiality": 0,
                                "depth": 2,
                                "author_flair_background_color": null,
                                "mod_reports": [],
                                "mod_note": null,
                                "distinguished": null
                              }
                            }
                          ],
                          "after": null,
                          "before": null
                        }
                      },
                      "user_reports": [],
                      "saved": false,
                      "id": "c9dumxu",
                      "banned_at_utc": null,
                      "mod_reason_title": null,
                      "gilded": 0,
                      "archived": true,
                      "report_reasons": null,
                      "author": "aphexcoil",
                      "can_mod_post": false,
                      "send_replies": true,
                      "parent_id": "t1_c9ducr2",
                      "score": 3,
                      "author_fullname": "t2_3ek27",
                      "approved_by": null,
                      "all_awardings": [],
                      "subreddit_id": "t5_2qizd",
                      "body": "As I said in my introduction, I am still learning Python.  Python v3+ is not included in the recent releases of most Linux distributions, so I wanted to go with something that most people probably already have available to them.  \n\nYes, logging into Reddit for this particular task is not required, but future tutorials will require authentication, so I wanted to include that now.  I wanted to show how to authenticate using requests in the event that another developer passes a request to Reddit that does use authentication.  \n\nAs far as SQLite3, yes, I could use that.  But then someone else would ask why I don't use (insert their favorite DB here).  I had to go with something, so I chose MySQL since it works well for the tutorial set. \n\nConcerning the \"after\" variable usage -- if a request is successful, the Reddit API will always return a new value for the \"after\" variable.  Again, there is additional error handling code that can be implemented, but for this quick and dirty lesson, I wanted to show the basics so that beginning developers can understand what is taking place throughout the script.\n\nI'm not sure how using requests is overkill.  There is no performance issue in using it, and future lessons will get more technical.  Again, there's a lot of different ways to do something, and choosing one will always have someone asking why another method wasn't used.  \n\nI've tested this script and it works well for what it was designed to do.  I do need to add additional code for the error handling aspects of the script, but again, this is just something to get people started as a development exercise.  If they want to use it in a production system, a lot more code will be needed to handle different types of failures.  \n\nWhile Python 3 is great, most systems right now are still using Python v2.7 until the Ubuntu community feels that Python 3 is stable enough and well-tested to include it as a default in their distributions.  \n\nAlso, this script already has a custom user agent.  It is required by the Reddit API so that the admins can look at the logs and very quickly determine what the bot is doing and who it belongs to.  \n\nThanks for the suggestions!\n\nEdit:  I didn't take your criticisms personally.  I've worked in teams doing development and one of the first things that one learns is that nobody is a perfect coder and that the team as a whole is there to make the product better and not personally attack a particular coder.  \n\nOne thing that I would love is (if you have time) for you to make a few tweaks to the code and post it in here.  If it makes the script better, that's awesome!  I'm all for it.  Also, I do agree in principle with some of the things you mentioned.  Again, I just went with MySQL because it is a common DB that a lot of developers use in their projects.  \n\nSecond Edit:  We do need to include a little more error handling -- at least something that will tell the script to back off for X seconds when a certain HTTP error is encountered.  If Reddit is down for whatever reason, the script should back off for X seconds and retry.  If the site is still down, then back off for X+ seconds and so on.\n\n\nPs:  Are you familar with any current Linux distribution that includes Python v3.x in their default package?\n\n(Also, authenticating before making your request is important because it changes the response one receives from the Reddit API.  If you are not logged in, you will not get certain pieces of data such as submissions that you saved, likes that you made, etc.)\n",
                      "edited": 1365786182.0,
                      "author_flair_css_class": null,
                      "is_submitter": true,
                      "downs": 0,
                      "author_flair_richtext": [],
                      "author_patreon_flair": false,
                      "collapsed_reason": null,
                      "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As I said in my introduction, I am still learning Python.  Python v3+ is not included in the recent releases of most Linux distributions, so I wanted to go with something that most people probably already have available to them.  &lt;/p&gt;\n\n&lt;p&gt;Yes, logging into Reddit for this particular task is not required, but future tutorials will require authentication, so I wanted to include that now.  I wanted to show how to authenticate using requests in the event that another developer passes a request to Reddit that does use authentication.  &lt;/p&gt;\n\n&lt;p&gt;As far as SQLite3, yes, I could use that.  But then someone else would ask why I don&amp;#39;t use (insert their favorite DB here).  I had to go with something, so I chose MySQL since it works well for the tutorial set. &lt;/p&gt;\n\n&lt;p&gt;Concerning the &amp;quot;after&amp;quot; variable usage -- if a request is successful, the Reddit API will always return a new value for the &amp;quot;after&amp;quot; variable.  Again, there is additional error handling code that can be implemented, but for this quick and dirty lesson, I wanted to show the basics so that beginning developers can understand what is taking place throughout the script.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not sure how using requests is overkill.  There is no performance issue in using it, and future lessons will get more technical.  Again, there&amp;#39;s a lot of different ways to do something, and choosing one will always have someone asking why another method wasn&amp;#39;t used.  &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve tested this script and it works well for what it was designed to do.  I do need to add additional code for the error handling aspects of the script, but again, this is just something to get people started as a development exercise.  If they want to use it in a production system, a lot more code will be needed to handle different types of failures.  &lt;/p&gt;\n\n&lt;p&gt;While Python 3 is great, most systems right now are still using Python v2.7 until the Ubuntu community feels that Python 3 is stable enough and well-tested to include it as a default in their distributions.  &lt;/p&gt;\n\n&lt;p&gt;Also, this script already has a custom user agent.  It is required by the Reddit API so that the admins can look at the logs and very quickly determine what the bot is doing and who it belongs to.  &lt;/p&gt;\n\n&lt;p&gt;Thanks for the suggestions!&lt;/p&gt;\n\n&lt;p&gt;Edit:  I didn&amp;#39;t take your criticisms personally.  I&amp;#39;ve worked in teams doing development and one of the first things that one learns is that nobody is a perfect coder and that the team as a whole is there to make the product better and not personally attack a particular coder.  &lt;/p&gt;\n\n&lt;p&gt;One thing that I would love is (if you have time) for you to make a few tweaks to the code and post it in here.  If it makes the script better, that&amp;#39;s awesome!  I&amp;#39;m all for it.  Also, I do agree in principle with some of the things you mentioned.  Again, I just went with MySQL because it is a common DB that a lot of developers use in their projects.  &lt;/p&gt;\n\n&lt;p&gt;Second Edit:  We do need to include a little more error handling -- at least something that will tell the script to back off for X seconds when a certain HTTP error is encountered.  If Reddit is down for whatever reason, the script should back off for X seconds and retry.  If the site is still down, then back off for X+ seconds and so on.&lt;/p&gt;\n\n&lt;p&gt;Ps:  Are you familar with any current Linux distribution that includes Python v3.x in their default package?&lt;/p&gt;\n\n&lt;p&gt;(Also, authenticating before making your request is important because it changes the response one receives from the Reddit API.  If you are not logged in, you will not get certain pieces of data such as submissions that you saved, likes that you made, etc.)&lt;/p&gt;\n&lt;/div&gt;",
                      "stickied": false,
                      "subreddit_type": "public",
                      "can_gild": true,
                      "gildings": {},
                      "author_flair_text_color": null,
                      "score_hidden": false,
                      "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9dumxu/",
                      "num_reports": null,
                      "locked": false,
                      "name": "t1_c9dumxu",
                      "created": 1365814308.0,
                      "subreddit": "redditdev",
                      "author_flair_text": null,
                      "collapsed": false,
                      "created_utc": 1365785508.0,
                      "subreddit_name_prefixed": "r/redditdev",
                      "controversiality": 0,
                      "depth": 1,
                      "author_flair_background_color": null,
                      "mod_reports": [],
                      "mod_note": null,
                      "distinguished": null
                    }
                  }
                ],
                "after": null,
                "before": null
              }
            },
            "user_reports": [],
            "saved": false,
            "id": "c9ducr2",
            "banned_at_utc": null,
            "mod_reason_title": null,
            "gilded": 0,
            "archived": true,
            "report_reasons": null,
            "author": "wub_wub",
            "can_mod_post": false,
            "send_replies": true,
            "parent_id": "t3_1c75dh",
            "score": 3,
            "author_fullname": "t2_5352p",
            "approved_by": null,
            "all_awardings": [],
            "subreddit_id": "t5_2qizd",
            "body": "Since it looks like you're writing this for beginners few thoughts:\n\n* Why aren't you using built-in SQLite3? For simpler things like this it might be better since you don't have to configure anything, and it works right out of the box on all platforms? \nhttp://docs.python.org/2/library/sqlite3.html\n\n* Logging in isn't necessary for retrieving submissions, maybe you should have left that part for some other tutorial where it's required.\n\n* While requests is great, this could have been done without it, it's overkill for this. You just need to modify user agent to something other than `Python` or whatever the default is (If you insist on using requests you might want to add description on how to install it).\n\n    req = urllib2.Request(\"http://www.reddit.com/r/all/new/.json?limit=100\")\n    req.add_header(\"User-agent\", \"My reddit bot script\")\n    data=json.load(urllib2.urlopen(req))\n\n* Using python to write to file makes more sense than what you're doing. Since it's simple to implement. Preferably using something like argparse to get output file name. (And will work on windows also)\nhttp://docs.python.org/2/library/argparse.html\n\n* It would be better to write a tutorial for Python 3.x instead of sticking to 2.7 forever. (Unless the script requires libraries for 2.x that aren't supported or there is no replacement for them on 3.x)\n\n* If opening url with `after=` parameter fails (like it sometimes happens when going through pages, because link position changed or maybe it got removed) won't your script be stuck in a infinite loop trying to open it and getting `!=200` error every time? Since technically `after` will stay the same? I'm pretty tired and haven't ran the script so I might be wrong here...\n\n\nTl;dr Use Python 3, remove login, add custom user agent, drop 3rd party modules, don't use `after=`, make it more windows friendly instead of using stuff that's available on *unix only as a replacement for python code.\n\n____\nNinja edit: looking at my comment it sounds like there are no positive things, I did not mean to sound like that. Your code works, has decent enough error handling for most cases and well... just gets the job done. I was just trying to point out things that could have been done better in my personal opinion.",
            "edited": 1365785063.0,
            "author_flair_css_class": null,
            "is_submitter": false,
            "downs": 0,
            "author_flair_richtext": [],
            "author_patreon_flair": false,
            "collapsed_reason": null,
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Since it looks like you&amp;#39;re writing this for beginners few thoughts:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Why aren&amp;#39;t you using built-in SQLite3? For simpler things like this it might be better since you don&amp;#39;t have to configure anything, and it works right out of the box on all platforms? \n&lt;a href=\"http://docs.python.org/2/library/sqlite3.html\"&gt;http://docs.python.org/2/library/sqlite3.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Logging in isn&amp;#39;t necessary for retrieving submissions, maybe you should have left that part for some other tutorial where it&amp;#39;s required.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;While requests is great, this could have been done without it, it&amp;#39;s overkill for this. You just need to modify user agent to something other than &lt;code&gt;Python&lt;/code&gt; or whatever the default is (If you insist on using requests you might want to add description on how to install it).&lt;/p&gt;\n\n&lt;p&gt;req = urllib2.Request(&amp;quot;&lt;a href=\"http://www.reddit.com/r/all/new/.json?limit=100%22\"&gt;http://www.reddit.com/r/all/new/.json?limit=100&amp;quot;&lt;/a&gt;)\nreq.add_header(&amp;quot;User-agent&amp;quot;, &amp;quot;My reddit bot script&amp;quot;)\ndata=json.load(urllib2.urlopen(req))&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Using python to write to file makes more sense than what you&amp;#39;re doing. Since it&amp;#39;s simple to implement. Preferably using something like argparse to get output file name. (And will work on windows also)\n&lt;a href=\"http://docs.python.org/2/library/argparse.html\"&gt;http://docs.python.org/2/library/argparse.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It would be better to write a tutorial for Python 3.x instead of sticking to 2.7 forever. (Unless the script requires libraries for 2.x that aren&amp;#39;t supported or there is no replacement for them on 3.x)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If opening url with &lt;code&gt;after=&lt;/code&gt; parameter fails (like it sometimes happens when going through pages, because link position changed or maybe it got removed) won&amp;#39;t your script be stuck in a infinite loop trying to open it and getting &lt;code&gt;!=200&lt;/code&gt; error every time? Since technically &lt;code&gt;after&lt;/code&gt; will stay the same? I&amp;#39;m pretty tired and haven&amp;#39;t ran the script so I might be wrong here...&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Tl;dr Use Python 3, remove login, add custom user agent, drop 3rd party modules, don&amp;#39;t use &lt;code&gt;after=&lt;/code&gt;, make it more windows friendly instead of using stuff that&amp;#39;s available on *unix only as a replacement for python code.&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Ninja edit: looking at my comment it sounds like there are no positive things, I did not mean to sound like that. Your code works, has decent enough error handling for most cases and well... just gets the job done. I was just trying to point out things that could have been done better in my personal opinion.&lt;/p&gt;\n&lt;/div&gt;",
            "stickied": false,
            "subreddit_type": "public",
            "can_gild": true,
            "gildings": {},
            "author_flair_text_color": null,
            "score_hidden": false,
            "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9ducr2/",
            "num_reports": null,
            "locked": false,
            "name": "t1_c9ducr2",
            "created": 1365813562.0,
            "subreddit": "redditdev",
            "author_flair_text": null,
            "collapsed": false,
            "created_utc": 1365784762.0,
            "subreddit_name_prefixed": "r/redditdev",
            "controversiality": 0,
            "depth": 0,
            "author_flair_background_color": null,
            "mod_reports": [],
            "mod_note": null,
            "distinguished": null
          }
        },
        {
          "kind": "t1",
          "data": {
            "total_awards_received": 0,
            "approved_at_utc": null,
            "ups": 2,
            "mod_reason_by": null,
            "banned_by": null,
            "author_flair_type": "text",
            "removal_reason": null,
            "link_id": "t3_1c75dh",
            "author_flair_template_id": null,
            "likes": null,
            "no_follow": true,
            "replies": "",
            "user_reports": [],
            "saved": false,
            "id": "c9e5kkc",
            "banned_at_utc": null,
            "mod_reason_title": null,
            "gilded": 0,
            "archived": true,
            "report_reasons": null,
            "author": "damontoo",
            "can_mod_post": false,
            "send_replies": true,
            "parent_id": "t3_1c75dh",
            "score": 2,
            "author_fullname": "t2_3lj9d",
            "approved_by": null,
            "all_awardings": [],
            "subreddit_id": "t5_2qizd",
            "body": "This is a nice tutorial, but I don't think anyone subscribed to this sub needs it. Maybe post them to /r/learnprogramming or something?",
            "edited": false,
            "author_flair_css_class": null,
            "is_submitter": false,
            "downs": 0,
            "author_flair_richtext": [],
            "author_patreon_flair": false,
            "collapsed_reason": null,
            "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is a nice tutorial, but I don&amp;#39;t think anyone subscribed to this sub needs it. Maybe post them to &lt;a href=\"/r/learnprogramming\"&gt;/r/learnprogramming&lt;/a&gt; or something?&lt;/p&gt;\n&lt;/div&gt;",
            "stickied": false,
            "subreddit_type": "public",
            "can_gild": true,
            "gildings": {},
            "author_flair_text_color": null,
            "score_hidden": false,
            "permalink": "/r/redditdev/comments/1c75dh/lesson_1_how_to_get_submission_data_from_reddits/c9e5kkc/",
            "num_reports": null,
            "locked": false,
            "name": "t1_c9e5kkc",
            "created": 1365845609.0,
            "subreddit": "redditdev",
            "author_flair_text": null,
            "collapsed": false,
            "created_utc": 1365816809.0,
            "subreddit_name_prefixed": "r/redditdev",
            "controversiality": 0,
            "depth": 0,
            "author_flair_background_color": null,
            "mod_reports": [],
            "mod_note": null,
            "distinguished": null
          }
        }
      ],
      "after": null,
      "before": null
    }
  }
]