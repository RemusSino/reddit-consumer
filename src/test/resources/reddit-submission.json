{
  "kind": "Listing",
  "data": {
    "modhash": "",
    "dist": 25,
    "children": [
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_sw60t",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Serving GraphQL queries from Go: an example",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": true,
          "name": "t3_bs82pr",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558673176.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "code-and-biscuits.blogspot.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs82pr",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "jamesrr39",
          "num_crossposts": 0,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs82pr/serving_graphql_queries_from_go_an_example/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://code-and-biscuits.blogspot.com/2019/05/serving-graphql-queries-from-go.html",
          "subreddit_subscribers": 76797,
          "created_utc": 1558644376.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_3jauf3au",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Owning a language: C++ vs. Go, simulate CPU in Golang, a Go + WASM tic-tac-toe bot &amp; more (The Go Gazette Edition #56)",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": true,
          "name": "t3_bs7o0v",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558671098.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "go-gazette.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs7o0v",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "GoGazette",
          "num_crossposts": 0,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs7o0v/owning_a_language_c_vs_go_simulate_cpu_in_golang/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "http://www.go-gazette.com/issues/owning-a-language-c-vs-go-simulate-cpu-in-golang-a-go-wasm-tic-tac-toe-bot-179595",
          "subreddit_subscribers": 76797,
          "created_utc": 1558642298.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_rh2b9",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "go get defaulting to proxy.golang.org and sum.golang.org",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": true,
          "name": "t3_bs7l3y",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558670692.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "groups.google.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs7l3y",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "kaeshiwaza",
          "num_crossposts": 0,
          "num_comments": 0,
          "send_replies": false,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs7l3y/go_get_defaulting_to_proxygolangorg_and/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://groups.google.com/forum/#!topic/golang-dev/4Kw_OfGa7cc",
          "subreddit_subscribers": 76797,
          "created_utc": 1558641892.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_dtqnh",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Cloudflare looking for reviewers for cryptography code written in Go",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs6r8m",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 4,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 4,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "crosspost_parent_list": [
            {
              "approved_at_utc": null,
              "subreddit": "crypto",
              "selftext": "",
              "author_fullname": "t2_67dxp",
              "saved": false,
              "mod_reason_title": null,
              "gilded": 0,
              "clicked": false,
              "title": "Cloudflare looking for reviewers for cryptography code written in Go",
              "link_flair_richtext": [],
              "subreddit_name_prefixed": "r/crypto",
              "hidden": false,
              "pwls": 6,
              "link_flair_css_class": null,
              "downs": 0,
              "hide_score": false,
              "name": "t3_bs5aie",
              "quarantine": false,
              "link_flair_text_color": "dark",
              "author_flair_background_color": "",
              "subreddit_type": "public",
              "ups": 20,
              "total_awards_received": 0,
              "media_embed": {},
              "author_flair_template_id": "96e01114-53bb-11e9-b6eb-0ee0a5ab731c",
              "is_original_content": false,
              "user_reports": [],
              "secure_media": null,
              "is_reddit_media_domain": false,
              "is_meta": false,
              "category": null,
              "secure_media_embed": {},
              "link_flair_text": null,
              "can_mod_post": false,
              "score": 20,
              "approved_by": null,
              "thumbnail": "",
              "edited": false,
              "author_flair_css_class": "moderator",
              "author_flair_richtext": [],
              "gildings": {},
              "content_categories": null,
              "is_self": false,
              "mod_note": null,
              "created": 1558658926.0,
              "link_flair_type": "text",
              "wls": 6,
              "banned_by": null,
              "author_flair_type": "text",
              "domain": "mobile.twitter.com",
              "selftext_html": null,
              "likes": null,
              "suggested_sort": null,
              "banned_at_utc": null,
              "view_count": null,
              "archived": false,
              "no_follow": false,
              "is_crosspostable": false,
              "pinned": false,
              "over_18": false,
              "all_awardings": [],
              "media_only": false,
              "can_gild": false,
              "spoiler": false,
              "locked": false,
              "author_flair_text": "Trusted third party",
              "visited": false,
              "num_reports": null,
              "distinguished": null,
              "subreddit_id": "t5_2qq4h",
              "mod_reason_by": null,
              "removal_reason": null,
              "link_flair_background_color": "",
              "id": "bs5aie",
              "is_robot_indexable": true,
              "report_reasons": null,
              "author": "Natanael_L",
              "num_crossposts": 1,
              "num_comments": 3,
              "send_replies": true,
              "whitelist_status": "all_ads",
              "contest_mode": false,
              "mod_reports": [],
              "author_patreon_flair": false,
              "author_flair_text_color": "dark",
              "permalink": "/r/crypto/comments/bs5aie/cloudflare_looking_for_reviewers_for_cryptography/",
              "parent_whitelist_status": "all_ads",
              "stickied": false,
              "url": "https://mobile.twitter.com/grittygrease/status/1131600201515380736",
              "subreddit_subscribers": 94792,
              "created_utc": 1558630126.0,
              "media": null,
              "is_video": false
            }
          ],
          "created": 1558666383.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "mobile.twitter.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs6r8m",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "ston1th",
          "num_crossposts": 0,
          "num_comments": 0,
          "send_replies": false,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "crosspost_parent": "t3_bs5aie",
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs6r8m/cloudflare_looking_for_reviewers_for_cryptography/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://mobile.twitter.com/grittygrease/status/1131600201515380736",
          "subreddit_subscribers": 76797,
          "created_utc": 1558637583.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "Given that I have a slice of URLs (up to 100), I would like to download them asynchronously. I was hoping to use goroutines to accomplish this.\n\nHere are my functions for downloading a single file given its URL:\n\n    func formatFilename(url string, tags string) string {\n    \textension := strings.Split(url, \"/\")\n    \treturn strings.Replace(tags, \"+\", \"_\", -1) + \"_\" + extension[len(extension)-1]\n    }\n    \n    func putFile(url string, filename string, file *os.File, client *http.Client) {\n    \tresp, err := client.Get(url)\n    \tcheckError(err)\n    \tdefer resp.Body.Close()\n    \tsize, err := io.Copy(file, resp.Body)\n    \tdefer file.Close()\n    \tcheckError(err)\n    \tfmt.Printf(\"Downloaded file %s with size %d\\n\", filename, size )\n    }\n    \n    func createFile(filename string) *os.File {\n    \tfile, err := os.Create(filename)\n    \tcheckError(err)\n    \treturn file\n    }\n    \n    func downloadFile(iteration int, post Post, query Query, wg sync.WaitGroup) {\n    \tfilename := formatFilename(post.FileURL, query.TagsQuery)\n    \n    \t// Checking to see the order files gets called in to make sure async\n    \tfmt.Println(iteration, post.FileURL, filename)\n    \n    \tfile := createFile(filename)\n    \n    \t// Saving file here\n    \tputFile(post.FileURL, filename, file, httpClient())\n    \twg.Done()\n    }\n    \n    func httpClient() *http.Client {\n    \tclient := http.Client {\n    \t\tCheckRedirect: func(r *http.Request, via []*http.Request) error {\n    \t\t\tr.URL.Opaque = r.URL.Path\n    \t\t\treturn nil\n    \t\t},\n    \t}\n    \treturn &amp;client\n    }\n    \n    func checkError(err error) {\n    \tif err != nil {\n    \t\tpanic(err)\n    \t}\n    }\n\nAnd here is how I am calling this in `main()`:\n\n    var wg sync.WaitGroup\n    for i, post := range postList.Posts {\n        wg.Add(1)\n        go downloadFile(i, post, query, wg)\n    }\n    wg.Wait()\n\nI'm not sure if this is the proper way to do it with goroutines, as the script still seems a bit slow. Right now my goroutine is inside the for loop in `main()` which iterates through each post from a slice and calls `downloadFile()` to download the post's URL.",
          "author_fullname": "t2_3tik7qv8",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Fastest way to download multiple files, given a slice of URLs?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs65df",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558663254.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Given that I have a slice of URLs (up to 100), I would like to download them asynchronously. I was hoping to use goroutines to accomplish this.&lt;/p&gt;\n\n&lt;p&gt;Here are my functions for downloading a single file given its URL:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func formatFilename(url string, tags string) string {\n    extension := strings.Split(url, &amp;quot;/&amp;quot;)\n    return strings.Replace(tags, &amp;quot;+&amp;quot;, &amp;quot;_&amp;quot;, -1) + &amp;quot;_&amp;quot; + extension[len(extension)-1]\n}\n\nfunc putFile(url string, filename string, file *os.File, client *http.Client) {\n    resp, err := client.Get(url)\n    checkError(err)\n    defer resp.Body.Close()\n    size, err := io.Copy(file, resp.Body)\n    defer file.Close()\n    checkError(err)\n    fmt.Printf(&amp;quot;Downloaded file %s with size %d\\n&amp;quot;, filename, size )\n}\n\nfunc createFile(filename string) *os.File {\n    file, err := os.Create(filename)\n    checkError(err)\n    return file\n}\n\nfunc downloadFile(iteration int, post Post, query Query, wg sync.WaitGroup) {\n    filename := formatFilename(post.FileURL, query.TagsQuery)\n\n    // Checking to see the order files gets called in to make sure async\n    fmt.Println(iteration, post.FileURL, filename)\n\n    file := createFile(filename)\n\n    // Saving file here\n    putFile(post.FileURL, filename, file, httpClient())\n    wg.Done()\n}\n\nfunc httpClient() *http.Client {\n    client := http.Client {\n        CheckRedirect: func(r *http.Request, via []*http.Request) error {\n            r.URL.Opaque = r.URL.Path\n            return nil\n        },\n    }\n    return &amp;amp;client\n}\n\nfunc checkError(err error) {\n    if err != nil {\n        panic(err)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And here is how I am calling this in &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var wg sync.WaitGroup\nfor i, post := range postList.Posts {\n    wg.Add(1)\n    go downloadFile(i, post, query, wg)\n}\nwg.Wait()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m not sure if this is the proper way to do it with goroutines, as the script still seems a bit slow. Right now my goroutine is inside the for loop in &lt;code&gt;main()&lt;/code&gt; which iterates through each post from a slice and calls &lt;code&gt;downloadFile()&lt;/code&gt; to download the post&amp;#39;s URL.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs65df",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "a6b6",
          "num_crossposts": 0,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs65df/fastest_way_to_download_multiple_files_given_a/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/bs65df/fastest_way_to_download_multiple_files_given_a/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558634454.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_2z2hi7hn",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Golang team, you beautiful bastards. You fixed Go's dependency management. ILU",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs5bmw",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 82,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": true,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 82,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558659083.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "i.redd.it",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs5bmw",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "iamtherealgrayson",
          "num_crossposts": 0,
          "num_comments": 15,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs5bmw/golang_team_you_beautiful_bastards_you_fixed_gos/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://i.redd.it/bgeq04phqzz21.png",
          "subreddit_subscribers": 76797,
          "created_utc": 1558630283.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_e5e06",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "To Keep Track of Reddit Discussions Around nytimes.com Content, NYT Built a Slack Bot with Go",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs53eh",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 2,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 2,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558657924.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "open.nytimes.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs53eh",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "MistakenForYeti",
          "num_crossposts": 0,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs53eh/to_keep_track_of_reddit_discussions_around/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://open.nytimes.com/to-keep-track-of-reddit-discussions-around-new-york-times-content-we-built-a-slack-bot-4d9e6484f8dd",
          "subreddit_subscribers": 76797,
          "created_utc": 1558629124.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "I've been trying all day and am pretty frustrated. There's tools like dh-make-golang and dh-golang, which are supposed to make this easy. They don't seem to work with packages that are not uploaded somewhere in the Internet. Also, they demand very strange paths for dependencies. And the documentation is no good. Can someone please provide a simple example with a one-file main package program or a link to something usable?",
          "author_fullname": "t2_kkdj7",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "How do I make a debian package of a go program?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs4e61",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 3,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 3,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558654460.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been trying all day and am pretty frustrated. There&amp;#39;s tools like dh-make-golang and dh-golang, which are supposed to make this easy. They don&amp;#39;t seem to work with packages that are not uploaded somewhere in the Internet. Also, they demand very strange paths for dependencies. And the documentation is no good. Can someone please provide a simple example with a one-file main package program or a link to something usable?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs4e61",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "florencka",
          "num_crossposts": 0,
          "num_comments": 1,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs4e61/how_do_i_make_a_debian_package_of_a_go_program/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/bs4e61/how_do_i_make_a_debian_package_of_a_go_program/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558625660.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_2aqx4b5x",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "GitHub - timestee/idleaf: Integer id generator by golang",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs36ri",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 0,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 0,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558648226.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "github.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs36ri",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "timesmaster",
          "num_crossposts": 0,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs36ri/github_timesteeidleaf_integer_id_generator_by/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://github.com/timestee/idleaf",
          "subreddit_subscribers": 76797,
          "created_utc": 1558619426.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_6pk94",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "opts: A package for building frictionless command-line interfaces",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs29jx",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558642875.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "github.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs29jx",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "Jamo008",
          "num_crossposts": 0,
          "num_comments": 1,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs29jx/opts_a_package_for_building_frictionless/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://github.com/jpillora/opts",
          "subreddit_subscribers": 76797,
          "created_utc": 1558614075.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_3kt4b9bn",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "How To Do Math in Go with Operators | DigitalOcean",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs1zok",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 0,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 0,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558641167.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "digitalocean.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs1zok",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "ambernc2004",
          "num_crossposts": 0,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs1zok/how_to_do_math_in_go_with_operators_digitalocean/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.digitalocean.com/community/tutorials/how-to-do-math-in-go-with-operators?utm_source=reddit&amp;utm_medium=social&amp;utm_campaign=do-math",
          "subreddit_subscribers": 76797,
          "created_utc": 1558612367.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "i need to read a CSV file ,use column contents(student id ,profile picture{use url . link present in csv file ,to get contentent and multipart encode it},name ) ,create a json and then make a API call using it .once i response back ,create a file in local directory..\n\n&amp;#x200B;\n\nneed help for sample",
          "author_fullname": "t2_1js1lxjd",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Go lang",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs17gj",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 0,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 0,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558635767.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;i need to read a CSV file ,use column contents(student id ,profile picture{use url . link present in csv file ,to get contentent and multipart encode it},name ) ,create a json and then make a API call using it .once i response back ,create a file in local directory..&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;need help for sample&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs17gj",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "sailesh3571",
          "num_crossposts": 0,
          "num_comments": 2,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs17gj/go_lang/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/bs17gj/go_lang/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558606967.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_5ww3i",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Go Time #86: Go modules and the Athens project",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs0v30",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 13,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 13,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558633045.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "changelog.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs0v30",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "jamesog",
          "num_crossposts": 0,
          "num_comments": 2,
          "send_replies": false,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs0v30/go_time_86_go_modules_and_the_athens_project/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://changelog.com/gotime/86",
          "subreddit_subscribers": 76797,
          "created_utc": 1558604245.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "So I am trying to search an index using aggregations and query, this is my code\n\n    agg := elastic.NewTermsAggregation().Field(\"formId.keyword\").Size(10000)\n\n    queryBody := MakeFilterPipeline(bodyMap, query)    \n\n    func MakeFilterPipeline(bodyMap map[string]interface{}, queryBody *elastic.BoolQuery) *elastic.BoolQuery {\n\t    formId := bodyMap[\"formId\"]\n\n\t    clientMatchQuery := elastic.NewRawStringQuery(\"{\\\"match\\\": {\\\"client\\\": \\\"android\\\"}}\")\n\t    formMatchQuery := elastic.NewRawStringQuery(fmt.Sprintf(\"{\\\"match\\\": {\\\"formId\\\": \\\"%s\\\"}}\", formId))\n\n\t    return queryBody.Filter(clientMatchQuery, formMatchQuery)\n    }\n\n\nI use these aggr and queries to run search `res, err = r.connection.Search(index).Aggregation(aggrName, aggrBody).Query(query).Size(0).Do(ctx)`\n\nI am getting this error `\"json: cannot unmarshal object into Go struct field SearchHits.total of type int64`\n\n\nThis seems to be coming from the library I am using github.com/olivere/elastic  \n\n\nIs this the fault of my code or the ES library and how to fix this?",
          "author_fullname": "t2_6s2uku",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Getting a json unmarshalling error while using the ES API oliver/elastic when trying to run a search function using agggregations",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_bs0av4",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558628096.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I am trying to search an index using aggregations and query, this is my code&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;agg := elastic.NewTermsAggregation().Field(&amp;quot;formId.keyword&amp;quot;).Size(10000)\n\nqueryBody := MakeFilterPipeline(bodyMap, query)    \n\nfunc MakeFilterPipeline(bodyMap map[string]interface{}, queryBody *elastic.BoolQuery) *elastic.BoolQuery {\n    formId := bodyMap[&amp;quot;formId&amp;quot;]\n\n    clientMatchQuery := elastic.NewRawStringQuery(&amp;quot;{\\&amp;quot;match\\&amp;quot;: {\\&amp;quot;client\\&amp;quot;: \\&amp;quot;android\\&amp;quot;}}&amp;quot;)\n    formMatchQuery := elastic.NewRawStringQuery(fmt.Sprintf(&amp;quot;{\\&amp;quot;match\\&amp;quot;: {\\&amp;quot;formId\\&amp;quot;: \\&amp;quot;%s\\&amp;quot;}}&amp;quot;, formId))\n\n    return queryBody.Filter(clientMatchQuery, formMatchQuery)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I use these aggr and queries to run search &lt;code&gt;res, err = r.connection.Search(index).Aggregation(aggrName, aggrBody).Query(query).Size(0).Do(ctx)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I am getting this error &lt;code&gt;&amp;quot;json: cannot unmarshal object into Go struct field SearchHits.total of type int64&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This seems to be coming from the library I am using github.com/olivere/elastic  &lt;/p&gt;\n\n&lt;p&gt;Is this the fault of my code or the ES library and how to fix this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "bs0av4",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "fenster25",
          "num_crossposts": 0,
          "num_comments": 6,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/bs0av4/getting_a_json_unmarshalling_error_while_using/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/bs0av4/getting_a_json_unmarshalling_error_while_using/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558599296.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "i am trying to do my first real use-case project in Go, basically the setup is like this :\n\n&amp;#x200B;\n\nAn exposed post REST-API will take incoming requests from clients, each request will be passed on to a single worker-queue that will execute a windows application that will generate a data-file that i then want to be available in another get REST API.\n\n&amp;#x200B;\n\nThere can only run one instance of that windows application, but there can be many that are trying to call in on the REST API, so that is why i need to queue the incoming calls, and then when its their turn i want to return the answer back to them on the first call. ( but they always have to be able to call the GET API to get a status of a current or previous job ).\n\n&amp;#x200B;\n\nI don't know if its overkill to use a channel for this but it seems to be a nice and fast way to just create a queue of the jobs, but my issue with this is that if ex the server crashes then i will have lost all my queue.\n\n&amp;#x200B;\n\nSo i would somehow like to do :\n\n&amp;#x200B;\n\nincoming post API - create job in database - add to queue\n\nworker : change db status for job to \"processing\" - process job - change db status for job to \"done\"  - done worker\n\n&amp;#x200B;\n\nI was thinking of SQ-Lite but it seems this could cause some conflict if channels are involved, then if i understand it correctly i could do a lock around every database access - but not sure if that will slow things down extremely much and is it safe at all to do that ?  \n\n&amp;#x200B;\n\nOr am i totally missing the point here and would you recommend a totally different model of doing this ?",
          "author_fullname": "t2_14jmit",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "queue/worker with persistant storage ?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brzsh7",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558623678.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;i am trying to do my first real use-case project in Go, basically the setup is like this :&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;An exposed post REST-API will take incoming requests from clients, each request will be passed on to a single worker-queue that will execute a windows application that will generate a data-file that i then want to be available in another get REST API.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;There can only run one instance of that windows application, but there can be many that are trying to call in on the REST API, so that is why i need to queue the incoming calls, and then when its their turn i want to return the answer back to them on the first call. ( but they always have to be able to call the GET API to get a status of a current or previous job ).&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t know if its overkill to use a channel for this but it seems to be a nice and fast way to just create a queue of the jobs, but my issue with this is that if ex the server crashes then i will have lost all my queue.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;So i would somehow like to do :&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;incoming post API - create job in database - add to queue&lt;/p&gt;\n\n&lt;p&gt;worker : change db status for job to &amp;quot;processing&amp;quot; - process job - change db status for job to &amp;quot;done&amp;quot;  - done worker&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I was thinking of SQ-Lite but it seems this could cause some conflict if channels are involved, then if i understand it correctly i could do a lock around every database access - but not sure if that will slow things down extremely much and is it safe at all to do that ?  &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Or am i totally missing the point here and would you recommend a totally different model of doing this ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brzsh7",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "riverexit",
          "num_crossposts": 0,
          "num_comments": 6,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brzsh7/queueworker_with_persistant_storage/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/brzsh7/queueworker_with_persistant_storage/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558594878.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_edeol",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "GeNeRiCs",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brvixw",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 444,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": true,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 444,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558594669.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "i.redd.it",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brvixw",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "GeneReddit123",
          "num_crossposts": 0,
          "num_comments": 116,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brvixw/generics/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://i.redd.it/ex33jx5zeuz21.png",
          "subreddit_subscribers": 76797,
          "created_utc": 1558565869.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_v4959hb",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Go is Google\u2019s language, not the community\u2019s",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brthn3",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 0,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 0,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "crosspost_parent_list": [
            {
              "approved_at_utc": null,
              "subreddit": "programming",
              "selftext": "",
              "author_fullname": "t2_dh7qw",
              "saved": false,
              "mod_reason_title": null,
              "gilded": 0,
              "clicked": false,
              "title": "Go is Google\u2019s language, not the community\u2019s",
              "link_flair_richtext": [],
              "subreddit_name_prefixed": "r/programming",
              "hidden": false,
              "pwls": 6,
              "link_flair_css_class": null,
              "downs": 0,
              "hide_score": false,
              "name": "t3_brmxgf",
              "quarantine": false,
              "link_flair_text_color": "dark",
              "author_flair_background_color": null,
              "subreddit_type": "public",
              "ups": 408,
              "total_awards_received": 0,
              "media_embed": {},
              "author_flair_template_id": null,
              "is_original_content": false,
              "user_reports": [],
              "secure_media": null,
              "is_reddit_media_domain": false,
              "is_meta": false,
              "category": null,
              "secure_media_embed": {},
              "link_flair_text": null,
              "can_mod_post": false,
              "score": 408,
              "approved_by": null,
              "thumbnail": "",
              "edited": false,
              "author_flair_css_class": null,
              "author_flair_richtext": [],
              "gildings": {},
              "content_categories": null,
              "is_self": false,
              "mod_note": null,
              "created": 1558548900.0,
              "link_flair_type": "text",
              "wls": 6,
              "banned_by": null,
              "author_flair_type": "text",
              "domain": "news.ycombinator.com",
              "selftext_html": null,
              "likes": null,
              "suggested_sort": null,
              "banned_at_utc": null,
              "view_count": null,
              "archived": false,
              "no_follow": false,
              "is_crosspostable": false,
              "pinned": false,
              "over_18": false,
              "all_awardings": [],
              "media_only": false,
              "can_gild": false,
              "spoiler": false,
              "locked": false,
              "author_flair_text": null,
              "visited": false,
              "num_reports": null,
              "distinguished": null,
              "subreddit_id": "t5_2fwo",
              "mod_reason_by": null,
              "removal_reason": null,
              "link_flair_background_color": "",
              "id": "brmxgf",
              "is_robot_indexable": true,
              "report_reasons": null,
              "author": "BubuX",
              "num_crossposts": 2,
              "num_comments": 375,
              "send_replies": true,
              "whitelist_status": "all_ads",
              "contest_mode": false,
              "mod_reports": [],
              "author_patreon_flair": false,
              "author_flair_text_color": null,
              "permalink": "/r/programming/comments/brmxgf/go_is_googles_language_not_the_communitys/",
              "parent_whitelist_status": "all_ads",
              "stickied": false,
              "url": "https://news.ycombinator.com/item?id=19978200",
              "subreddit_subscribers": 2036767,
              "created_utc": 1558520100.0,
              "media": null,
              "is_video": false
            }
          ],
          "created": 1558584287.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "news.ycombinator.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brthn3",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "zitrusgrape",
          "num_crossposts": 0,
          "num_comments": 13,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "crosspost_parent": "t3_brmxgf",
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brthn3/go_is_googles_language_not_the_communitys/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://news.ycombinator.com/item?id=19978200",
          "subreddit_subscribers": 76797,
          "created_utc": 1558555487.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "I've been working on a tool to help me deal with problems with my k8s-based deployments. Things like browsing the available pods, deleting a misbehaving pod, or following the logs of a pods in a deployment because I have no idea where a request will land were quite tedious with kubectl.\n\nSo I created a tool that, imho, greatly simplifies these tasks. I also wanted to play with making it extensible via a scripting language, so I ended up using goja and allowing certain extensibility via javascript, which didn't turn out too badly.\n\nLink: [github repo](https://github.com/urandom/kd)",
          "author_fullname": "t2_5nuay",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "TUI tools for monitoring and debugging k8s-based deployments.",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brt0ya",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 17,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 17,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558582091.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been working on a tool to help me deal with problems with my k8s-based deployments. Things like browsing the available pods, deleting a misbehaving pod, or following the logs of a pods in a deployment because I have no idea where a request will land were quite tedious with kubectl.&lt;/p&gt;\n\n&lt;p&gt;So I created a tool that, imho, greatly simplifies these tasks. I also wanted to play with making it extensible via a scripting language, so I ended up using goja and allowing certain extensibility via javascript, which didn&amp;#39;t turn out too badly.&lt;/p&gt;\n\n&lt;p&gt;Link: &lt;a href=\"https://github.com/urandom/kd\"&gt;github repo&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brt0ya",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "saturn_vk",
          "num_crossposts": 0,
          "num_comments": 0,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brt0ya/tui_tools_for_monitoring_and_debugging_k8sbased/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/brt0ya/tui_tools_for_monitoring_and_debugging_k8sbased/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558553291.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "Hi gophers!\n\nDo you know about any software of indie developer that generates any profit? Let me explain myself.\n\nThere are many apps (android &amp; ios) and programs that generates money directly to developers but I dont know any software that generates benefits made with golang. Yes, I know that exists software like toggle which is made with golang but I'm talking about \"little\" pieces of software like a simple app that can be published on play store for example.",
          "author_fullname": "t2_2h488ta7",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Earn money selling software made with golang",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brsw55",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 0,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 0,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558581439.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi gophers!&lt;/p&gt;\n\n&lt;p&gt;Do you know about any software of indie developer that generates any profit? Let me explain myself.&lt;/p&gt;\n\n&lt;p&gt;There are many apps (android &amp;amp; ios) and programs that generates money directly to developers but I dont know any software that generates benefits made with golang. Yes, I know that exists software like toggle which is made with golang but I&amp;#39;m talking about &amp;quot;little&amp;quot; pieces of software like a simple app that can be published on play store for example.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brsw55",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "vicentdev",
          "num_crossposts": 0,
          "num_comments": 10,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brsw55/earn_money_selling_software_made_with_golang/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/brsw55/earn_money_selling_software_made_with_golang/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558552639.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "Hello guys, maybe you can give me a hint how to solve my problem. I have two slices of structs:  \n`type timeSlot struct {`\n\n`Start time.Time`\n\n`End   time.Time`  \n`}`\n\nand i need to find third slice, that would be an intersection of time in first and second. Maybe there is simple solution like lib or standard library func cause i don\\`t want to write custom comparators.",
          "author_fullname": "t2_2y9gem47",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Time intersection problem",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brr39o",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558572413.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello guys, maybe you can give me a hint how to solve my problem. I have two slices of structs:&lt;br/&gt;\n&lt;code&gt;type timeSlot struct {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Start time.Time&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;End   time.Time&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;and i need to find third slice, that would be an intersection of time in first and second. Maybe there is simple solution like lib or standard library func cause i don`t want to write custom comparators.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brr39o",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "sergdonskoi",
          "num_crossposts": 0,
          "num_comments": 3,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brr39o/time_intersection_problem/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/brr39o/time_intersection_problem/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558543613.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_slnayyl",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "socks5 proxy over TLS (basic VPN)",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brqw7m",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 3,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 3,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558571427.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "godoc.org",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brqw7m",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "AwkwardAddress",
          "num_crossposts": 0,
          "num_comments": 1,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brqw7m/socks5_proxy_over_tls_basic_vpn/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://godoc.org/github.com/artyom/tlstun",
          "subreddit_subscribers": 76797,
          "created_utc": 1558542627.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_dglb8",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Monitors and Mutexes, A (light) Survey",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brqviv",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 0,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 0,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558571339.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "medium.com",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brqviv",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "dm03514",
          "num_crossposts": 0,
          "num_comments": 1,
          "send_replies": false,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brqviv/monitors_and_mutexes_a_light_survey/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://medium.com/@dm03514/golang-monitors-and-mutexes-a-light-survey-84f04f9b7c09",
          "subreddit_subscribers": 76797,
          "created_utc": 1558542539.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "anyone else get this error \"build cache is required, but could not be located: GOCACHE is not defined and neither $XDG_CACHE_HOME nor $HOME are defined\"",
          "author_fullname": "t2_3jt483td",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "dockerfile go 1.12 playing up",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brotu3",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 0,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 0,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558560684.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;anyone else get this error &amp;quot;build cache is required, but could not be located: GOCACHE is not defined and neither $XDG_CACHE_HOME nor $HOME are defined&amp;quot;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brotu3",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "dshi34ewkjfdnas3",
          "num_crossposts": 0,
          "num_comments": 7,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brotu3/dockerfile_go_112_playing_up/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/brotu3/dockerfile_go_112_playing_up/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558531884.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "I've been writing web apps completely in Go using templates, HTML and CSS from scratch. There's a bit of client-side JS, but nothing too heavy. I find it quite easy now that I have my own framework in place, and HTML and CSS is easy to debug.\n\nI want my next project to be available as a web app **and** as a downloadable application from the App Store.\n\nI was originally going to go down the same route and build the app as simply a browser for the site, but I've since been recommended [React](https://facebook.github.io/react-native/).\n\n**My two options are...**\n\n1. Build an app using HTML and CSS from scratch completely in Go using templates (something I'm familiar with).\n2. Build an app using React Native and use Go to build the backend APIs.\n\nWhich method would you prefer? What's your own preferred stack?",
          "author_fullname": "t2_52cpq",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "What's your method of making web/mobile applications in Go?",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brohg1",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 2,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 2,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": true,
          "mod_note": null,
          "created": 1558558738.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "self.golang",
          "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been writing web apps completely in Go using templates, HTML and CSS from scratch. There&amp;#39;s a bit of client-side JS, but nothing too heavy. I find it quite easy now that I have my own framework in place, and HTML and CSS is easy to debug.&lt;/p&gt;\n\n&lt;p&gt;I want my next project to be available as a web app &lt;strong&gt;and&lt;/strong&gt; as a downloadable application from the App Store.&lt;/p&gt;\n\n&lt;p&gt;I was originally going to go down the same route and build the app as simply a browser for the site, but I&amp;#39;ve since been recommended &lt;a href=\"https://facebook.github.io/react-native/\"&gt;React&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;My two options are...&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Build an app using HTML and CSS from scratch completely in Go using templates (something I&amp;#39;m familiar with).&lt;/li&gt;\n&lt;li&gt;Build an app using React Native and use Go to build the backend APIs.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Which method would you prefer? What&amp;#39;s your own preferred stack?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;",
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": false,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brohg1",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "stizzo96",
          "num_crossposts": 0,
          "num_comments": 7,
          "send_replies": true,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brohg1/whats_your_method_of_making_webmobile/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://www.reddit.com/r/golang/comments/brohg1/whats_your_method_of_making_webmobile/",
          "subreddit_subscribers": 76797,
          "created_utc": 1558529938.0,
          "media": null,
          "is_video": false
        }
      },
      {
        "kind": "t3",
        "data": {
          "approved_at_utc": null,
          "subreddit": "golang",
          "selftext": "",
          "author_fullname": "t2_xngca",
          "saved": false,
          "mod_reason_title": null,
          "gilded": 0,
          "clicked": false,
          "title": "Go is Google\u2019s language, not the community\u2019s",
          "link_flair_richtext": [],
          "subreddit_name_prefixed": "r/golang",
          "hidden": false,
          "pwls": 6,
          "link_flair_css_class": null,
          "downs": 0,
          "hide_score": false,
          "name": "t3_brlpqy",
          "quarantine": false,
          "link_flair_text_color": "dark",
          "author_flair_background_color": null,
          "subreddit_type": "public",
          "ups": 1,
          "total_awards_received": 0,
          "media_embed": {},
          "author_flair_template_id": null,
          "is_original_content": false,
          "user_reports": [],
          "secure_media": null,
          "is_reddit_media_domain": false,
          "is_meta": false,
          "category": null,
          "secure_media_embed": {},
          "link_flair_text": null,
          "can_mod_post": false,
          "score": 1,
          "approved_by": null,
          "thumbnail": "",
          "edited": false,
          "author_flair_css_class": null,
          "author_flair_richtext": [],
          "gildings": {},
          "content_categories": null,
          "is_self": false,
          "mod_note": null,
          "created": 1558538776.0,
          "link_flair_type": "text",
          "wls": 6,
          "banned_by": null,
          "author_flair_type": "text",
          "domain": "utcc.utoronto.ca",
          "selftext_html": null,
          "likes": null,
          "suggested_sort": null,
          "banned_at_utc": null,
          "view_count": null,
          "archived": false,
          "no_follow": true,
          "is_crosspostable": false,
          "pinned": false,
          "over_18": false,
          "all_awardings": [],
          "media_only": false,
          "can_gild": false,
          "spoiler": false,
          "locked": false,
          "author_flair_text": null,
          "visited": false,
          "num_reports": null,
          "distinguished": null,
          "subreddit_id": "t5_2rc7j",
          "mod_reason_by": null,
          "removal_reason": null,
          "link_flair_background_color": "",
          "id": "brlpqy",
          "is_robot_indexable": true,
          "report_reasons": null,
          "author": "boramalper",
          "num_crossposts": 0,
          "num_comments": 32,
          "send_replies": false,
          "whitelist_status": "all_ads",
          "contest_mode": false,
          "mod_reports": [],
          "author_patreon_flair": false,
          "author_flair_text_color": null,
          "permalink": "/r/golang/comments/brlpqy/go_is_googles_language_not_the_communitys/",
          "parent_whitelist_status": "all_ads",
          "stickied": false,
          "url": "https://utcc.utoronto.ca/~cks/space/blog/programming/GoIsGooglesLanguage",
          "subreddit_subscribers": 76797,
          "created_utc": 1558509976.0,
          "media": null,
          "is_video": false
        }
      }
    ],
    "after": "t3_brlpqy",
    "before": null
  }
}